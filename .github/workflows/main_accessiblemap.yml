# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
name: Build and deploy Node.js app to Azure Web App - accessiblemap
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout GitHub repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci

      # Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci

      # Build the frontend
      - name: Build the frontend
        run: npm run build:frontend
        env:
          VITE_OPENROUTE_API_KEY: ${{ secrets.VITE_OPENROUTE_API_KEY }}

      # Build the backend
      - name: Build the backend
        working-directory: ./server
        run: npm run build

      # Copy server package.json for dependency installation
      - name: Copy server package.json
        run: cp ./server/package.json ./server/dist/

      # Remove type:module from package.json if present
      - name: Check if package.json has type:module
        working-directory: ./server/dist
        run: |
          if grep -q '"type"\s*:\s*"module"' package.json; then
            echo "Removing type:module from package.json"
            node -e "const pkg = require('./package.json'); delete pkg.type; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
          fi

      # Install dependencies in server/dist
      - name: Install dependencies in server/dist
        working-directory: ./server/dist
        run: npm install --production

      # Copy frontend files directly to server/dist
      - name: Copy frontend files
        run: |
          cp -r ./dist/* ./server/dist/ || echo "No frontend files to copy"

      # Create debug app with request logging
      - name: Create debug app
        working-directory: ./server/dist
        run: |
          cat > debug-app.js << 'EOL'
          const express = require("express");
          const helmet = require("helmet");
          const compression = require("compression");
          const cors = require("cors");
          const path = require("path");
          const fs = require("fs");
          const crypto = require("crypto");
          
          // Create log directory
          const logDir = path.join(__dirname, "logs");
          if (!fs.existsSync(logDir)) {
            fs.mkdirSync(logDir);
          }
          
          // Setup logging
          const logFile = path.join(logDir, "debug.log");
          const log = (...args) => {
            const message = args.map(arg => 
              typeof arg === "object" ? JSON.stringify(arg, null, 2) : arg
            ).join(" ");
            const timestamp = new Date().toISOString();
            const logMessage = `${timestamp}: ${message}\n`;
            console.log(message);
            try {
              fs.appendFileSync(logFile, logMessage);
            } catch (err) {
              console.error("Failed to write to log file:", err);
            }
          };
          
          // Global error handler
          process.on("uncaughtException", (err) => {
            log(`UNCAUGHT EXCEPTION: ${err.message}`);
            log(err.stack);
          });
          
          process.on("unhandledRejection", (reason, promise) => {
            log(`UNHANDLED REJECTION: ${reason}`);
          });
          
          log("Starting debug app...");
          
          const app = express();
          const PORT = process.env.PORT || 8080;
          
          // Enable request logging middleware
          app.use((req, res, next) => {
            log(`[REQUEST] ${req.method} ${req.url}`);
            log(`[HEADERS] ${JSON.stringify(req.headers, null, 2)}`);
            
            // Clone the request data for logging
            const oldJson = res.json;
            res.json = function(data) {
              log(`[RESPONSE] ${JSON.stringify(data, null, 2)}`);
              return oldJson.apply(res, arguments);
            };
            
            // Log raw request body for debugging
            const chunks = [];
            req.on('data', chunk => chunks.push(chunk));
            req.on('end', () => {
              if (chunks.length > 0) {
                const body = Buffer.concat(chunks).toString();
                log(`[REQUEST BODY RAW] ${body}`);
                try {
                  const jsonBody = JSON.parse(body);
                  log(`[REQUEST BODY JSON] ${JSON.stringify(jsonBody, null, 2)}`);
                } catch (e) {
                  log(`[REQUEST BODY PARSE ERROR] ${e.message}`);
                }
              }
            });
            
            next();
          });
          
          log("Setting up middleware...");
          
          // Middleware
          app.use(helmet({
            contentSecurityPolicy: false
          }));
          app.use(compression());
          app.use(cors({
            origin: "*",
            methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
            credentials: true
          }));
          
          // IMPORTANT: We're removing express.json() middleware to see raw body
          // app.use(express.json());
          
          // In-memory user storage
          const users = [
            { id: 1, username: "user1", email: "user1@example.com", password: "hashedpassword1", location: { lat: 40.7128, lng: -74.0060 } },
            { id: 2, username: "user2", email: "user2@example.com", password: "hashedpassword2", location: { lat: 34.0522, lng: -118.2437 } }
          ];
          
          // Add request body debugging middleware
          app.use((req, res, next) => {
            req.users = users;
            next();
          });
          
          // Echo endpoint for debugging
          app.post("/api/debug-echo", (req, res) => {
            log("Debug echo endpoint hit");
            
            // Collect body manually since we removed json middleware
            const chunks = [];
            req.on('data', chunk => chunks.push(chunk));
            req.on('end', () => {
              try {
                const body = Buffer.concat(chunks).toString();
                log(`Echo body: ${body}`);
                
                let jsonBody = {};
                try {
                  jsonBody = JSON.parse(body);
                } catch (e) {
                  log(`Parse error: ${e.message}`);
                }
                
                res.json({
                  message: "Echo response",
                  receivedHeaders: req.headers,
                  receivedBody: jsonBody,
                  receivedBodyRaw: body,
                  receivedMethod: req.method,
                  receivedUrl: req.url,
                  timestamp: new Date().toISOString()
                });
              } catch (err) {
                log(`Echo error: ${err.message}`);
                res.status(500).json({ error: err.message });
              }
            });
          });
          
          // User signup API with detailed debugging
          app.post("/api/signup", (req, res) => {
            log("Signup API hit");
            
            // Collect body manually
            const chunks = [];
            req.on('data', chunk => chunks.push(chunk));
            req.on('end', () => {
              try {
                const body = Buffer.concat(chunks).toString();
                log(`Signup body raw: ${body}`);
                
                let userData;
                try {
                  userData = JSON.parse(body);
                  log(`Signup body parsed: ${JSON.stringify(userData, null, 2)}`);
                } catch (e) {
                  log(`Signup body parse error: ${e.message}`);
                  return res.status(400).json({ 
                    status: "error", 
                    message: "Invalid JSON in request body",
                    parseError: e.message
                  });
                }
                
                // Accept any data format for debugging
                const { username, email, password, name, user_name, userName, location } = userData;
                
                // Use any available username field
                const finalUsername = username || name || user_name || userName || "user" + (req.users.length + 1);
                const finalEmail = email || finalUsername + "@example.com";
                const finalPassword = password || "default";
                
                log(`Processed signup data: username=${finalUsername}, email=${finalEmail}`);
                
                // Simple validation for debugging
                if (!finalEmail.includes("@")) {
                  log("Invalid email format");
                  return res.status(400).json({ 
                    status: "error", 
                    message: "Invalid email format" 
                  });
                }
                
                // Hash password (simple version)
                const hashedPassword = crypto
                  .createHash("sha256")
                  .update(finalPassword)
                  .digest("hex");
                
                // Create new user in memory
                const newUser = {
                  id: req.users.length + 1,
                  username: finalUsername,
                  email: finalEmail,
                  password: hashedPassword,
                  location: location || { lat: null, lng: null }
                };
                
                req.users.push(newUser);
                
                log(`User created in memory with ID: ${newUser.id}`);
                return res.status(201).json({
                  status: "success",
                  message: "User created successfully (debug mode)",
                  user: {
                    id: newUser.id,
                    username: finalUsername,
                    email: finalEmail
                  }
                });
              } catch (err) {
                log(`Error in signup process: ${err.message}`);
                log(err.stack);
                return res.status(500).json({
                  status: "error",
                  message: "Server error during signup",
                  error: err.message
                });
              }
            });
          });
          
          // Health check endpoint
          app.get("/health", (req, res) => {
            log("Health check endpoint hit");
            res.status(200).json({ 
              status: "OK",
              mode: "debug"
            });
          });
          
          // Serve static frontend files
          const staticPath = path.resolve(__dirname);
          log(`Serving static files from: ${staticPath}`);
          app.use(express.static(staticPath));
          
          // Catch-all route for SPA
          app.get("*", (req, res) => {
            log(`Catch-all route hit for: ${req.url}`);
            const indexPath = path.join(__dirname, "index.html");
            log(`Serving index.html from: ${indexPath}`);
            res.sendFile(indexPath, (err) => {
              if (err) {
                log(`Error serving index.html: ${err.message}`);
                res.status(500).send("Server error");
              }
            });
          });
          
          // Error handling middleware
          app.use((err, req, res, next) => {
            log(`Express error handler: ${err.message}`);
            log(err.stack);
            res.status(500).json({
              error: "Server error",
              message: err.message
            });
          });
          
          // Start the server
          app.listen(PORT, () => {
            log(`Debug app running on port ${PORT}`);
          });
          EOL
          
          # Update package.json
          node -e "const pkg = require('./package.json'); pkg.main = 'debug-app.js'; pkg.scripts = pkg.scripts || {}; pkg.scripts.start = 'node debug-app.js'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

      # Create web.config for Azure
      - name: Create web.config for Azure
        working-directory: ./server/dist
        run: |
          cat > web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="debug-app.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="API">
                    <match url="api/*" />
                    <action type="Rewrite" url="debug-app.js" />
                  </rule>
                  <rule name="Health">
                    <match url="health" />
                    <action type="Rewrite" url="debug-app.js" />
                  </rule>
                  <rule name="StaticContent">
                    <match url="(.*)" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" />
                    </conditions>
                    <action type="None" />
                  </rule>
                  <rule name="DynamicContent">
                    <match url=".*" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="debug-app.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                watchedFiles="web.config;*.js"
                loggingEnabled="true"
                logDirectory="iisnode" 
                debuggingEnabled="true" />
            </system.webServer>
          </configuration>
          EOL

      # Log deployment package contents
      - name: Log deployment package contents
        run: |
          echo "Deployment package contents:"
          ls -la ./server/dist/

      # Deploy to Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: accessiblemap
          slot-name: production
          package: ./server/dist
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
