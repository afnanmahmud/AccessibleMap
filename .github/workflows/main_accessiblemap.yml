# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
name: Build and deploy Node.js app to Azure Web App - accessiblemap
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout GitHub repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci

      # Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci

      # Build the frontend
      - name: Build the frontend
        run: npm run build:frontend
        env:
          VITE_OPENROUTE_API_KEY: ${{ secrets.VITE_OPENROUTE_API_KEY }}

      # Build the backend
      - name: Build the backend
        working-directory: ./server
        run: npm run build

      # Copy server package.json for dependency installation
      - name: Copy server package.json
        run: cp ./server/package.json ./server/dist/

      # Remove type:module from package.json if present
      - name: Check if package.json has type:module
        working-directory: ./server/dist
        run: |
          if grep -q '"type"\s*:\s*"module"' package.json; then
            echo "Removing type:module from package.json"
            node -e "const pkg = require('./package.json'); delete pkg.type; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
          fi

      # Install dependencies in server/dist
      - name: Install dependencies in server/dist
        working-directory: ./server/dist
        run: npm install --production

      # Copy frontend files directly to server/dist
      - name: Copy frontend files
        run: |
          cp -r ./dist/* ./server/dist/ || echo "No frontend files to copy"

      # Create a testing form
      - name: Create testing form
        working-directory: ./server/dist
        run: |
          cat > test-signup.html << 'EOL'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>API Test Form</title>
            <style>
              body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
              .form-group { margin-bottom: 15px; }
              label { display: block; margin-bottom: 5px; }
              input, textarea { width: 100%; padding: 8px; box-sizing: border-box; }
              button { padding: 10px 15px; background: #4CAF50; color: white; border: none; cursor: pointer; }
              .response { margin-top: 20px; padding: 15px; background: #f5f5f5; border-radius: 4px; white-space: pre-wrap; }
            </style>
          </head>
          <body>
            <h1>API Test Form</h1>
            
            <div class="form-group">
              <label for="endpoint">API Endpoint:</label>
              <input type="text" id="endpoint" value="/api/signup" />
            </div>
            
            <div class="form-group">
              <label for="method">Method:</label>
              <select id="method">
                <option value="POST">POST</option>
                <option value="GET">GET</option>
                <option value="PUT">PUT</option>
                <option value="DELETE">DELETE</option>
              </select>
            </div>
            
            <div class="form-group">
              <label for="payload">Request Payload (JSON):</label>
              <textarea id="payload" rows="10">
          {
            "username": "testuser",
            "email": "test@example.com",
            "password": "password123",
            "location": {
              "latitude": 40.7128,
              "longitude": -74.0060
            }
          }
          </textarea>
            </div>
            
            <button id="submit">Send Request</button>
            
            <div class="response" id="response"></div>
            
            <script>
              document.getElementById('submit').addEventListener('click', async () => {
                const endpoint = document.getElementById('endpoint').value;
                const method = document.getElementById('method').value;
                const payload = document.getElementById('payload').value;
                const responseElement = document.getElementById('response');
                
                try {
                  responseElement.textContent = 'Sending request...';
                  
                  const response = await fetch(endpoint, {
                    method: method,
                    headers: {
                      'Content-Type': 'application/json'
                    },
                    body: method !== 'GET' ? payload : undefined
                  });
                  
                  const data = await response.text();
                  let formattedData;
                  
                  try {
                    formattedData = JSON.stringify(JSON.parse(data), null, 2);
                  } catch (e) {
                    formattedData = data;
                  }
                  
                  responseElement.textContent = `Status: ${response.status} ${response.statusText}\n\n${formattedData}`;
                } catch (error) {
                  responseElement.textContent = `Error: ${error.message}`;
                }
              });
            </script>
          </body>
          </html>
          EOL

      # Create very permissive debug app
      - name: Create permissive debug app
        working-directory: ./server/dist
        run: |
          cat > permissive-app.js << 'EOL'
          const express = require("express");
          const helmet = require("helmet");
          const compression = require("compression");
          const path = require("path");
          const fs = require("fs");
          const util = require("util");
          
          // Create log directory
          const logDir = path.join(__dirname, "logs");
          if (!fs.existsSync(logDir)) {
            fs.mkdirSync(logDir);
          }
          
          // Setup logging
          const logFile = path.join(logDir, "permissive.log");
          const log = (...args) => {
            const message = args.map(arg => 
              typeof arg === "object" ? util.inspect(arg, { depth: null }) : arg
            ).join(" ");
            const timestamp = new Date().toISOString();
            const logMessage = `${timestamp}: ${message}\n`;
            console.log(message);
            try {
              fs.appendFileSync(logFile, logMessage);
            } catch (err) {
              console.error("Failed to write to log file:", err);
            }
          };
          
          // Global error handler
          process.on("uncaughtException", (err) => {
            log(`UNCAUGHT EXCEPTION: ${err.message}`);
            log(err.stack);
          });
          
          process.on("unhandledRejection", (reason, promise) => {
            log(`UNHANDLED REJECTION: ${reason}`);
          });
          
          log("Starting permissive debug app...");
          
          const app = express();
          const PORT = process.env.PORT || 8080;
          
          // Log all requests
          app.use((req, res, next) => {
            log(`REQUEST: ${req.method} ${req.url}`);
            log(`HEADERS: ${util.inspect(req.headers)}`);
            next();
          });
          
          // CORS handling - allow everything
          app.use((req, res, next) => {
            res.header("Access-Control-Allow-Origin", "*");
            res.header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS");
            res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept, Authorization");
            
            // Handle preflight requests
            if (req.method === 'OPTIONS') {
              return res.status(200).end();
            }
            
            next();
          });
          
          // Body parsing middleware - raw body access
          app.use(express.text({ type: '*/*' }));
          
          // Custom JSON parsing
          app.use((req, res, next) => {
            if (req.is('application/json') || req.is('text/plain') || req.is('*/json')) {
              try {
                log(`RAW BODY: ${req.body}`);
                req.rawBody = req.body;
                req.jsonBody = JSON.parse(req.body);
                log(`PARSED JSON: ${util.inspect(req.jsonBody)}`);
              } catch (e) {
                log(`JSON PARSE ERROR: ${e.message}`);
                // Continue anyway, don't reject the request
              }
            }
            next();
          });
          
          // Signup endpoint that accepts anything
          app.post('/api/signup', (req, res) => {
            log('SIGNUP ENDPOINT HIT');
            log(`BODY TYPE: ${typeof req.body}`);
            log(`BODY: ${util.inspect(req.body)}`);
            
            // Accept anything and parse it somehow
            let username, email, password;
            
            if (typeof req.body === 'string') {
              // Try to parse as JSON
              try {
                const parsed = JSON.parse(req.body);
                log(`Parsed body as JSON: ${util.inspect(parsed)}`);
                
                // Try to extract from various formats
                username = parsed.username || parsed.user || parsed.name || 'default_user';
                email = parsed.email || parsed.mail || username + '@example.com';
                password = parsed.password || parsed.pass || 'default_password';
              } catch (e) {
                log(`Failed to parse body as JSON: ${e.message}`);
                
                // Just use the raw body as something
                username = 'raw_user';
                email = 'raw@example.com';
                password = 'raw_password';
              }
            } else if (req.jsonBody) {
              // We already parsed it in middleware
              username = req.jsonBody.username || req.jsonBody.user || req.jsonBody.name || 'json_user';
              email = req.jsonBody.email || req.jsonBody.mail || username + '@example.com';
              password = req.jsonBody.password || req.jsonBody.pass || 'json_password';
            } else if (req.body && typeof req.body === 'object') {
              // It was automatically parsed somehow
              username = req.body.username || req.body.user || req.body.name || 'object_user';
              email = req.body.email || req.body.mail || username + '@example.com';
              password = req.body.password || req.body.pass || 'object_password';
            } else {
              // Default values
              username = 'default_user';
              email = 'default@example.com';
              password = 'default_password';
            }
            
            log(`EXTRACTED: username=${username}, email=${email}, password=${password}`);
            
            // Always succeed with what we got
            res.status(201).json({
              success: true,
              message: 'User registered successfully (debug mode)',
              user: {
                id: Math.floor(Math.random() * 1000) + 1,
                username,
                email
              }
            });
          });
          
          // Echo endpoint
          app.post('/api/echo', (req, res) => {
            log('ECHO ENDPOINT HIT');
            res.json({
              method: req.method,
              url: req.url,
              headers: req.headers,
              body: req.body,
              rawBody: req.rawBody,
              jsonBody: req.jsonBody,
              contentType: req.get('Content-Type'),
              timestamp: new Date().toISOString()
            });
          });
          
          // Health check
          app.get('/health', (req, res) => {
            res.json({ status: 'OK', mode: 'permissive' });
          });
          
          // Serve test page
          app.get('/test', (req, res) => {
            res.sendFile(path.join(__dirname, 'test-signup.html'));
          });
          
          // Static files
          app.use(express.static(path.resolve(__dirname)));
          
          // SPA fallback
          app.get('*', (req, res) => {
            res.sendFile(path.join(__dirname, 'index.html'));
          });
          
          // Error handler
          app.use((err, req, res, next) => {
            log(`ERROR: ${err.message}`);
            log(err.stack);
            res.status(500).json({ error: 'Internal server error' });
          });
          
          // Start server
          app.listen(PORT, () => {
            log(`Permissive debug app running on port ${PORT}`);
          });
          EOL
          
          # Update package.json
          node -e "const pkg = require('./package.json'); pkg.main = 'permissive-app.js'; pkg.scripts = pkg.scripts || {}; pkg.scripts.start = 'node permissive-app.js'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

      # Create web.config for Azure
      - name: Create web.config for Azure
        working-directory: ./server/dist
        run: |
          cat > web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="permissive-app.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="API">
                    <match url="api/*" />
                    <action type="Rewrite" url="permissive-app.js" />
                  </rule>
                  <rule name="Test">
                    <match url="test" />
                    <action type="Rewrite" url="permissive-app.js" />
                  </rule>
                  <rule name="Health">
                    <match url="health" />
                    <action type="Rewrite" url="permissive-app.js" />
                  </rule>
                  <rule name="StaticContent">
                    <match url="(.*)" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" />
                    </conditions>
                    <action type="None" />
                  </rule>
                  <rule name="DynamicContent">
                    <match url=".*" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="permissive-app.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                watchedFiles="web.config;*.js"
                loggingEnabled="true"
                logDirectory="iisnode" 
                debuggingEnabled="true" />
            </system.webServer>
          </configuration>
          EOL

      # Log deployment package contents
      - name: Log deployment package contents
        run: |
          echo "Deployment package contents:"
          ls -la ./server/dist/

      # Deploy to Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: accessiblemap
          slot-name: production
          package: ./server/dist
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
