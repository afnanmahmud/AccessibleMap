# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
name: Build and deploy Node.js app to Azure Web App - accessiblemap
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout GitHub repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci

      # Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci

      # Build the frontend
      - name: Build the frontend
        run: npm run build:frontend
        env:
          VITE_OPENROUTE_API_KEY: ${{ secrets.VITE_OPENROUTE_API_KEY }}

      # Build the backend
      - name: Build the backend
        working-directory: ./server
        run: npm run build

      # Copy server package.json for dependency installation
      - name: Copy server package.json
        run: cp ./server/package.json ./server/dist/

      # Remove type:module from package.json if present
      - name: Check if package.json has type:module
        working-directory: ./server/dist
        run: |
          if grep -q '"type"\s*:\s*"module"' package.json; then
            echo "Removing type:module from package.json"
            node -e "const pkg = require('./package.json'); delete pkg.type; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
          fi

      # Install dependencies in server/dist
      - name: Install dependencies in server/dist
        working-directory: ./server/dist
        run: npm install --production

      # Copy frontend files directly to server/dist
      - name: Copy frontend files
        run: |
          cp -r ./dist/* ./server/dist/ || echo "No frontend files to copy"

      # Create intermediate app with mock API
      - name: Create intermediate app
        working-directory: ./server/dist
        run: |
          # Create a wrapper server with mock API endpoints
          echo 'const express = require("express");
          const helmet = require("helmet");
          const compression = require("compression");
          const cors = require("cors");
          const path = require("path");
          const fs = require("fs");

          // Create log directory
          const logDir = path.join(__dirname, "logs");
          if (!fs.existsSync(logDir)) {
            fs.mkdirSync(logDir);
          }

          // Setup logging
          const logFile = path.join(logDir, "app.log");
          const log = (...args) => {
            const message = args.map(arg => 
              typeof arg === "object" ? JSON.stringify(arg) : arg
            ).join(" ");
            const timestamp = new Date().toISOString();
            const logMessage = `${timestamp}: ${message}\n`;
            console.log(message);
            try {
              fs.appendFileSync(logFile, logMessage);
            } catch (err) {
              console.error("Failed to write to log file:", err);
            }
          };

          log("Starting intermediate server...");

          const app = express();
          const PORT = process.env.PORT || 8080;

          log("Setting up middleware...");

          // Middleware
          app.use(helmet({
            contentSecurityPolicy: false
          }));
          app.use(compression());
          app.use(cors({
            origin: "*",
            methods: ["GET", "POST", "PUT", "DELETE"],
            credentials: true
          }));
          app.use(express.json());

          // Diagnostic endpoints
          app.get("/health", (req, res) => {
            log("Health check endpoint hit");
            res.status(200).json({ status: "OK" });
          });

          app.get("/api-test", (req, res) => {
            log("API test endpoint hit");
            res.json({
              message: "API is working",
              timestamp: new Date().toISOString()
            });
          });

          // Mock user API endpoints
          app.get("/api/users", (req, res) => {
            log("GET /api/users endpoint hit");
            res.json([
              { id: 1, name: "Test User 1", email: "user1@example.com" },
              { id: 2, name: "Test User 2", email: "user2@example.com" }
            ]);
          });

          app.get("/api/users/:id", (req, res) => {
            log(`GET /api/users/${req.params.id} endpoint hit`);
            res.json({ id: parseInt(req.params.id), name: `Test User ${req.params.id}`, email: `user${req.params.id}@example.com` });
          });

          // Serve static frontend files
          const staticPath = path.resolve(__dirname);
          log(`Serving static files from: ${staticPath}`);
          app.use(express.static(staticPath));

          // Catch-all route for SPA
          app.get("*", (req, res) => {
            log(`Catch-all route hit for: ${req.url}`);
            const indexPath = path.join(__dirname, "index.html");
            log(`Serving index.html from: ${indexPath}`);
            res.sendFile(indexPath, (err) => {
              if (err) {
                log(`Error serving index.html: ${err.message}`);
                res.status(500).send("Server error");
              }
            });
          });

          // Start the server
          app.listen(PORT, () => {
            log(`Intermediate server running on port ${PORT}`);
            // List all available routes
            const routes = [];
            app._router.stack.forEach(middleware => {
              if (middleware.route) {
                // Routes registered directly on the app
                routes.push(`${Object.keys(middleware.route.methods)[0].toUpperCase()} ${middleware.route.path}`);
              } else if (middleware.name === "router") {
                // Router middleware
                middleware.handle.stack.forEach(handler => {
                  if (handler.route) {
                    routes.push(`${Object.keys(handler.route.methods)[0].toUpperCase()} ${middleware.regexp} ${handler.route.path}`);
                  }
                });
              }
            });
            log("Registered routes:", routes);
          });' > intermediate-app.js
          
          # Update package.json
          node -e "const pkg = require('./package.json'); pkg.main = 'intermediate-app.js'; pkg.scripts = pkg.scripts || {}; pkg.scripts.start = 'node intermediate-app.js'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"

      # Create web.config for Azure
      - name: Create web.config for Azure
        working-directory: ./server/dist
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="intermediate-app.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="API">
                    <match url="api/*" />
                    <action type="Rewrite" url="intermediate-app.js" />
                  </rule>
                  <rule name="Health">
                    <match url="health" />
                    <action type="Rewrite" url="intermediate-app.js" />
                  </rule>
                  <rule name="API Test">
                    <match url="api-test" />
                    <action type="Rewrite" url="intermediate-app.js" />
                  </rule>
                  <rule name="StaticContent">
                    <match url="(.*)" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" />
                    </conditions>
                    <action type="None" />
                  </rule>
                  <rule name="DynamicContent">
                    <match url=".*" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="intermediate-app.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                watchedFiles="web.config;*.js"
                loggingEnabled="true"
                logDirectory="iisnode" 
                debuggingEnabled="true" />
            </system.webServer>
          </configuration>' > web.config

      # Create diagnostic test file
      - name: Create diagnostic test file
        working-directory: ./server/dist
        run: |
          echo "Intermediate app diagnostic file created at deploy time: $(date)" > diagnostic-intermediate.txt

      # Log deployment package contents
      - name: Log deployment package contents
        run: |
          echo "Deployment package contents:"
          ls -la ./server/dist/

      # Deploy to Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: accessiblemap
          slot-name: production
          package: ./server/dist
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
