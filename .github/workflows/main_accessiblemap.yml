# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - accessiblemap
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - name: Checkout GitHub repository
        uses: actions/checkout@v4
      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      # Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci
      # Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./server
        run: npm ci
      # Build the frontend
      - name: Build the frontend
        run: npm run build:frontend
        env:
          VITE_OPENROUTE_API_KEY: ${{ secrets.VITE_OPENROUTE_API_KEY }}
      # Build the backend
      - name: Build the backend
        working-directory: ./server
        run: npm run build
      # Copy server package.json for dependency installation
      - name: Copy server package.json
        run: cp ./server/package.json ./server/dist/
      # Remove type:module from package.json if present
      - name: Check if package.json has type:module
        working-directory: ./server/dist
        run: |
          if grep -q '"type"\s*:\s*"module"' package.json; then
            echo "Removing type:module from package.json"
            node -e "const pkg = require('./package.json'); delete pkg.type; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
          fi
      # Create port check wrapper
      - name: Create port check wrapper
        working-directory: ./server/dist
        run: |
          echo 'try {
            // Ensure the app uses the PORT provided by Azure
            console.log("Starting application with enhanced error handling");
            process.on("uncaughtException", (err) => {
              console.error("UNCAUGHT EXCEPTION:", err);
              console.error(err.stack);
            });
            
            // Make sure we use the port Azure provides
            if (!process.env.PORT) {
              console.log("No PORT environment variable found, defaulting to 8080");
              process.env.PORT = "8080";
            }
            
            console.log(`Using PORT: ${process.env.PORT}`);
            
            // Load the application
            require("./index.js");
          } catch (err) {
            console.error("STARTUP ERROR:", err);
            console.error(err.stack);
          }' > server.js
      # Modify package.json for Azure
      - name: Modify package.json for Azure
        working-directory: ./server/dist
        run: |
          node -e "const pkg = require('./package.json'); pkg.main = 'server.js'; pkg.scripts = pkg.scripts || {}; pkg.scripts.start = 'node server.js'; require('fs').writeFileSync('./package.json', JSON.stringify(pkg, null, 2));"
      # Install dependencies in server/dist
      - name: Install dependencies in server/dist
        working-directory: ./server/dist
        run: npm install --production
      # Copy frontend files directly to server/dist
      - name: Copy frontend files
        run: |
          cp -r ./dist/* ./server/dist/
      # Create web.config for Azure
      - name: Create web.config for Azure
        working-directory: ./server/dist
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode" />
              </handlers>
              <rewrite>
                <rules>
                  <rule name="API">
                    <match url="api/*" />
                    <action type="Rewrite" url="server.js" />
                  </rule>
                  <rule name="Health">
                    <match url="health" />
                    <action type="Rewrite" url="server.js" />
                  </rule>
                  <rule name="StaticContent">
                    <match url="(.*)" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" />
                    </conditions>
                    <action type="None" />
                  </rule>
                  <rule name="DynamicContent">
                    <match url=".*" />
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="true" />
                    </conditions>
                    <action type="Rewrite" url="server.js" />
                  </rule>
                </rules>
              </rewrite>
              <iisnode watchedFiles="web.config;*.js" node_env="production" loggingEnabled="true" />
              <env key="PORT" value="8080" />
            </system.webServer>
          </configuration>' > web.config
      # Log deployment package contents
      - name: Log deployment package contents
        run: |
          echo "Deployment package contents:"
          ls -la ./server/dist/
      # Deploy to Azure App Service
      - name: Deploy to Azure App Service
        uses: azure/webapps-deploy@v3
        with:
          app-name: accessiblemap
          slot-name: production
          package: ./server/dist
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
